import atexit
import ctypes
import os
import threading
import time
from datetime import datetime
from io import BytesIO
import webbrowser

import subprocess
import platform
import socket
import psutil
import pyautogui
import pythoncom
import pygetwindow as gw
import telebot
import wmi
from telebot import types

import config

TOKEN = config.TOKEN
AUTHORIZED_CHAT_ID = config.AUTHORIZED_ID
IGNORED_PROCESSES = {'taskhostw.exe', 'TrustedInstaller.exe', 'sppsvc.exe', 'TiWorker.exe', 'audiodg.exe',
                     'fsnotifier.exe', 'QtWebEngineProcess.exe', 'RuntimeBroker.exe', 'backgroundTaskHost.exe',
                     'ApplicationFrameHost.exe', 'SystemSettings.exe', 'UserOOBEBroker.exe', 'amdow.exe',
                     'AMDRSServ.exe', 'cncmd.exe', 'clinfo.exe', 'RadeonSoftware.exe', 'TextInputHost.exe',
                     'AMDRSSrcExt.exe', 'powershell.exe', 'cmd.exe', 'WmiPrvSE.exe', '', 'dllhost.exe',
                     'CompPkgSrv.exe', 'SearchProtocolHost.exe', 'SearchFilterHost.exe', 'msedge.exe', 'python.exe',
                     'pingsender.exe', 'conhost.exe', 'svchost.exe'}
RESTART_THRESHOLD = 1
restart_count = {}
bot = telebot.TeleBot(TOKEN)

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç–∫—Ä–∞–Ω–∞ (0 - –≤—ã–∫–ª—é—á–µ–Ω, 1 - –≤–∫–ª—é—á–µ–Ω)
screen_state = 1

def send_startup_message():
    start_time = datetime.now().strftime("%H:%M:%S")
    bot.send_message(AUTHORIZED_CHAT_ID, f"üíª –ö–æ–º–ø—å—é—Ç–µ—Ä –≤–∫–ª—é—á–µ–Ω.\n‚öôÔ∏è –í—Ä–µ–º—è –≤–∫–ª—é—á–µ–Ω–∏—è: {start_time}",
                     reply_markup=create_keyboard())


def exit_handler():
    shutdown_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    bot.send_message(AUTHORIZED_CHAT_ID, f"üíª –ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω.\n‚öôÔ∏è –í—Ä–µ–º—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è: {shutdown_time}")


def process_events():
    try:
        pythoncom.CoInitialize()
        c = wmi.WMI()
        wmi_event = c.Win32_Process.watch_for("creation")
        while True:
            try:
                new_process = wmi_event()
                pythoncom.PumpWaitingMessages()
                if new_process.Caption and new_process.Caption not in IGNORED_PROCESSES:
                    time.sleep(1)
                    log_application_start(new_process.Caption)
            except wmi.x_wmi_timed_out:
                pass
            time.sleep(1)
    except Exception as e:
        print(f"Exception in process_events: {e}")
    finally:
        pythoncom.CoUninitialize()


def log_application_start(application_name):
    current_time = datetime.now()
    bot.send_message(AUTHORIZED_CHAT_ID,
                     f"üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {application_name}\n‚öôÔ∏è –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {current_time.strftime('%Y-%m-%d %H:%M:%S')}")


def take_screenshot():
    screenshot = pyautogui.screenshot()
    img_byte_array = BytesIO()
    screenshot.save(img_byte_array, format='PNG')
    img_byte_array.seek(0)
    return img_byte_array


def is_authorized(chat_id):
    return str(chat_id) == AUTHORIZED_CHAT_ID


def create_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2)
    shutdown_button = types.KeyboardButton('üí§ –í—ã–∫–ª—é—á–µ–Ω–∏–µ')
    screenshot_button = types.KeyboardButton('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç')
    offdevices_button = types.KeyboardButton('‚ùå –í—ã–∫–ª—é—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –º—ã—à—å (–¥–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏)')
    info_button = types.KeyboardButton('‚öôÔ∏è –í—ã–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã')
    processes_button = types.KeyboardButton('üí† –ü—Ä–æ—Ü–µ—Å—Å—ã')
    pc_button = types.KeyboardButton('üíª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ü–ö')
    keyboard.add(shutdown_button, screenshot_button, offdevices_button, info_button, processes_button, pc_button)
    return keyboard


def terminate_process(process_name):
    for process in psutil.process_iter(['pid', 'name']):
        if process.info['name'] == process_name:
            pid = process.info['pid']
            psutil.Process(pid).terminate()

@bot.message_handler(commands=['stop'])
def stop_bot(message):
    if is_authorized(message.chat.id):
        bot.send_message(message.chat.id, "‚ùå –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=types.ReplyKeyboardRemove())
        os.abort()
    else:
        bot.send_message(message.chat.id, "üö∑ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.", reply_markup=create_keyboard())

@bot.message_handler(func=lambda message: message.text.lower() in ['/pc', 'üíª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∫'])
def pc_info(message):
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ
    cpu_info = platform.processor()

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
    ram_info = round(psutil.virtual_memory().total / (1024 ** 3), 2)

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–µ
    disk_info = psutil.disk_usage('/')
    disk_total_gb = disk_info.total / (1024 ** 3)
    disk_used_gb = disk_info.used / (1024 ** 3)
    disk_percent_used = disk_info.percent

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏
    network_info = psutil.net_io_counters()
    network_usage = (network_info.bytes_sent + network_info.bytes_recv) / (1024 ** 2)

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    boot_time_timestamp = psutil.boot_time()
    boot_time = datetime.fromtimestamp(boot_time_timestamp)
    current_time = datetime.now()
    uptime = current_time - boot_time
    boot_time_str = boot_time.strftime("%Y-%m-%d %H:%M:%S")
    uptime_str = str(uptime).split('.')[0]

    # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    pc_message = (
        f"üíª **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ**:\n\n"
        f"üîß **–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:** {cpu_info}\n"
        f"üìä **–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å:** {ram_info} GB\n"
        f"üíæ **–û–±—â–∏–π –æ–±—ä–µ–º –¥–∏—Å–∫–∞:** {disk_used_gb:.1f}/{disk_total_gb:.1f} GB ({disk_percent_used}%)\n\n"
        f"üåê **IP-–∞–¥—Ä–µ—Å:** {socket.gethostbyname(socket.gethostname())}\n"
        f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {os.getlogin()}\n\n"
        f"üîÑ **–ó–∞–≥—Ä—É–∑–∫–∞**:\n"
        f"   - **–ü–∞–º—è—Ç—å:** {psutil.virtual_memory().percent}%\n"
        f"   - **–°–µ—Ç—å:** {network_usage:.2f} MB\n\n"
        f"‚è∞ **–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –ü–ö:** {boot_time_str}\n"
        f"üïí **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {uptime_str}"
    )

    bot.send_message(message.chat.id, pc_message, parse_mode='Markdown')

@bot.message_handler(commands=['terminate'])
def handle_terminate(message):
    if is_authorized(message.chat.id):
        try:
            _, process_name = message.text.split(maxsplit=1)
            process_name = process_name.strip()
            terminate_process(process_name)
            bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {process_name} –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=create_keyboard())
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /terminate.",
                             reply_markup=create_keyboard())
    else:
        bot.send_message(message.chat.id, "üö∑ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.", reply_markup=create_keyboard())


@bot.message_handler(commands=['url'])
def handle_url(message):
    if is_authorized(message.chat.id):
        try:
            _, url = message.text.split(maxsplit=1)
            if not url.startswith(('http://', 'https://')):
                url = 'http://' + url
            webbrowser.open(url)
            bot.send_message(message.chat.id, f"üåê –û—Ç–∫—Ä—ã–≤–∞—é —Å—Å—ã–ª–∫—É: {url}")
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –£–∫–∞–∂–∏—Ç–µ URL –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /url.")
    else:
        bot.send_message(message.chat.id, "üö∑ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")

@bot.message_handler(commands=['error'])
def handle_error(message):
    if is_authorized(message.chat.id):
        try:
            _, error_message = message.text.split(maxsplit=1)
            ctypes.windll.user32.MessageBoxW(0, error_message, "Error", 1 | 48)
            bring_window_to_front("Error")
            bot.send_message(message.chat.id, "‚úÖ –§–µ–π–∫–æ–≤–∞—è –æ—à–∏–±–∫–∞ –≤—ã–∑–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", reply_markup=create_keyboard())
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /error.", reply_markup=create_keyboard())
    else:
        bot.send_message(message.chat.id, "üö∑ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.", reply_markup=create_keyboard())


def bring_window_to_front(window_title):
    try:
        window = gw.getWindowsWithTitle(window_title)[0]
        window.activate()
    except IndexError:
        pass


@bot.message_handler(commands=['open'])
def handle_open(message):
    if is_authorized(message.chat.id):
        try:
            _, program_name = message.text.split(maxsplit=1)
            program_name = program_name.strip()

            # –ó–∞–ø—É—Å–∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
            subprocess.Popen([program_name])

            bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ {program_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞.",
                             reply_markup=create_keyboard())
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /open.",
                             reply_markup=create_keyboard())
        except Exception as e:
            error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /open: {e}"
            bot.send_message(message.chat.id, error_message, reply_markup=create_keyboard())
    else:
        bot.send_message(message.chat.id, "üö∑ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.", reply_markup=create_keyboard())

@bot.message_handler(func=lambda message: message.text.lower() in ['/start', '‚öôÔ∏è –≤—ã–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã'])
def handle_start(message):
    if is_authorized(message.chat.id):
        welcome_message = (
            "–ü—Ä–∏–≤–µ—Ç! –í–æ—Ç –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "üìå /start - –≤—ã–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.\n"
            "‚ö†Ô∏è /error {—Ç–µ–∫—Å—Ç} - –≤—ã–≤–æ–¥–∏—Ç —Ñ–µ–π–∫–æ–≤—É—é –æ—à–∏–±–∫—É.\n"
            "üñºÔ∏è /screenshot - –¥–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞.\n"
            "üí§ /off - –≤—ã–∫–ª—é—á–∞–µ—Ç –ø–∫.\n"
            "üö∑ /off_devices - –≤—ã–∫–ª—é—á–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –º—ã—à—å –¥–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏.\n"
            "üí† /processes - –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–∫.\n"
            "üåê /url {—Å—Å—ã–ª–∫–∞} - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–∞–π—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ.\n"
            "‚ùå /terminate {–ø—Ä–æ—Ü–µ—Å—Å} - —É–±–∏–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å\n"
            "‚úÖ /open {–Ω–∞–∑–≤–∞–Ω–∏–µ} - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É\n"
            "üíª /pc - –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–º –ø–∫\n"
            "üö∑ /stop - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞, –æ—Ç–∫–ª—é—á–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç.\n"
        )
        bot.send_message(message.chat.id, welcome_message, reply_markup=create_keyboard())
    else:
        bot.send_message(message.chat.id, "üö∑ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.", reply_markup=create_keyboard())


@bot.message_handler(func=lambda message: message.text.lower() in ['/screenshot', 'üì∏ —Å–∫—Ä–∏–Ω—à–æ—Ç'])
def handle_screen(message):
    if is_authorized(message.chat.id):
        try:
            screenshot = take_screenshot()
            bot.send_photo(message.chat.id, screenshot, caption="ü§ñ –°–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞:",
                           reply_markup=create_keyboard())
        except Exception as e:
            print(f"Exception in handle_screen: {e}")
    else:
        bot.send_message(message.chat.id, "üö∑ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")


@bot.message_handler(func=lambda message: message.text.lower() in ['/off', 'üí§ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ'])
def handle_off(message):
    if is_authorized(message.chat.id):
        bot.send_message(message.chat.id, "üí§ –í—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞...", reply_markup=create_keyboard())
        time.sleep(2)
        os.system('shutdown /s /t 1')
    else:
        bot.send_message(message.chat.id, "üö∑ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.", reply_markup=create_keyboard())


@bot.message_handler(func=lambda message: message.text.lower() in ['/off_devices', '‚ùå –≤—ã–∫–ª—é—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –º—ã—à—å (–¥–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏)'])
def handle_block_devices(message):
    if is_authorized(message.chat.id):
        ctypes.windll.user32.BlockInput(True)
        bot.send_message(message.chat.id,
                         "üí§ –í–≤–æ–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–º—ã—à—å –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞). –î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.",
                         reply_markup=create_keyboard())
    else:
        bot.send_message(message.chat.id, "üö∑ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.", reply_markup=create_keyboard())

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
def get_processes(page, limit=10):
    processes = []
    start_offset = (page - 1) * limit
    end_offset = start_offset + limit

    for proc in psutil.process_iter(['name', 'memory_info']):
        process_name = proc.info['name']
        if process_name.lower() not in IGNORED_PROCESSES:
            processes.append({'name': process_name, 'memory': proc.info['memory_info'].rss})

    return processes[start_offset:end_offset]


# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_inline_keyboard(page, limit):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    prev_button = types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f'prev {page} {limit}')
    next_button = types.InlineKeyboardButton("‚û°Ô∏è", callback_data=f'next {page} {limit}')
    keyboard.add(prev_button, next_button)
    return keyboard


@bot.message_handler(func=lambda message: message.text.lower() in ['/processes', 'üí† –ø—Ä–æ—Ü–µ—Å—Å—ã'])
def list_processes(message):
    if is_authorized(message.chat.id):
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            page = 1
            limit = 10

            processes = get_processes(page, limit)
            current_time = datetime.now()
            processes_message = f"üîÑ **–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã** (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}):\n‚öôÔ∏è –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {current_time.strftime('%Y-%m-%d %H:%M:%S')}\n\n"
            for i, process_info in enumerate(processes, start=(page - 1) * limit + 1):
                processes_message += f"{i}. üëæ *{process_info['name']}* - RAM: {process_info['memory'] / (1024 ** 2):.2f} MB\n"

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            bot.send_message(message.chat.id, processes_message, parse_mode='Markdown',
                             reply_markup=create_inline_keyboard(page, limit))
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    else:
        bot.send_message(message.chat.id, "üö∑ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±—ç–∫–æ–≤ –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith(('prev', 'next')))
def process_inline_callback(call):
    if is_authorized(call.message.chat.id):
        try:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ –∫–æ–ª–ª–±—ç–∫–∞
            action, page, limit = call.data.split()
            page = int(page)
            limit = int(limit)

            # –ü–µ—Ä–µ—Å—á–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
            if action == 'prev':
                page = max(1, page - 1)
            elif action == 'next':
                page += 1

            processes = get_processes(page, limit)
            current_time = datetime.now()
            processes_message = f"üîÑ **–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã** (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}):\n‚öôÔ∏è –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {current_time.strftime('%Y-%m-%d %H:%M:%S')}\n\n"
            for i, process_info in enumerate(processes, start=(page - 1) * limit + 1):
                processes_message += f"{i}. üëæ *{process_info['name']}* - RAM: {process_info['memory'] / (1024 ** 2):.2f} MB\n"

            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=processes_message, parse_mode='Markdown',
                                  reply_markup=create_inline_keyboard(page, limit))
        except Exception as e:
            bot.send_message(call.message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    else:
        bot.send_message(call.message.chat.id, "üö∑ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")

if __name__ == "__main__":
    send_startup_message_thread = threading.Thread(target=send_startup_message, daemon=True)
    send_startup_message_thread.start()

    process_events_thread = threading.Thread(target=process_events, daemon=True)
    process_events_thread.start()

    bot.polling(none_stop=True)
    atexit.register(exit_handler)
